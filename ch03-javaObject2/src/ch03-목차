ch03 목차

! 대소문자 비교 방법
(ch>='A') && (ch<='Z') ? "대문자임" : "소문자임";


kr.s01.exception - 예외처리
	예외가 발생해도 정상 종료될 수 있도록 프로그램적으로 처리하는 것을 말함
	예외가 발생하면 catch블럭으로 이동해서 예외가 발생한 이유를 설명하거나 대체코드를 작성
	ExceptionMain06 에 메서드에서 예외를 임시 보관, 처리하는 과정을 명시함. (throws 활용 - 메서드타이틀에 바로 기입, throw new - 내부내용에서 던지기)
	finally -> DB연동할때 주로 사용
	
	
	
kr.s02.list - 리스트에 대한 공부 : ArrayList
	add(추가), set(수정), remove(삭제), get(불러오기), isEmpty(비어있는지확인)
	ArrayList list = new ArrayList() -> 들어오는 모든 요소들을 Object로 자동으로 변환해서 집어넣음
	제네릭 표현 : 객체를 생성할 때 객체에 저장 할 수 있는 요소의 타입을 지정 (예시 : ArrayList<String> list = new ArrayList<String>() )
	Collections 클래스에 내장된 메서드를 활용하여 정렬을 수행할 수 있다.  (sort, reverse)정렬, 역정렬
	배열 -> 처음부터 기본값을 계속 사용할 경우에
	ArrayList -> 값이 계속 변경이 될 경우에(고정데이터로 사용을 잘 안함)
	Vector -> ArrayList 와 사용이 동일하지만, ArrayList가 성능이 더 좋음 (커넥션 풀에서 활용함)
	
	
	
kr.s03.stack - 자료구조	
	Stack -> 후입선출 LIFO(Last-In First-Out) 방식, [push, pop]
	
kr.s04.queue
	LinkedList -> 선입선출 FIFO(First-In First-Out) 방식 [offer, poll]
	
kr.s05.set
	HashSet ->	1.중복이 불가능 
				2.순서대로 입력되지 않음(index가 존재하지 않음) 
				3.일정하게 유지되지 않음 
				4.HashSet은 null 요소도 허용합니다
				
	Iterator ->	1. 컬렉션에서 요소를 제어하는 기능
				2. next() 및 previous()를 써서 앞뒤로 이동하는 기능
				3. hasNext()를 써서 더 많은 요소가 있는지 확인하는 기능

kr.s07, 08, 09 -> 메뉴, 체크제약, 반복문 연습


kr.s10.file -> 파일 생성, 수정, 삭제
	절대경로 - 해당파일, 폴더의 모든 경로를 지정
	상대경로 - 해당파일, 폴더명을 지정


kr.s11.input -> 사용자 입력, 파일을 읽어들여오기
	System.in.read() - 문자 하나를 입력 받아서 아스키 코드로 반환을 함 (숫자의 아스키코드는 48부터 시작하므로, 48을 빼줘야함)
	FileInputStream - 파일을 읽어 들여오는 클래스 (반환하는 방법에 따라 읽을수있거나,없는 문자가 존재)
		- available : 입력받은 문자들의 byte크기를 환산해서 반환하여주는 메서드
	BufferedReader/Writer - 콘솔, 파일, 네트워크등 Scanner보다 범용적으로 입출력사용이 가능하여 주로 사용함 
	
	
kr.s12.output -> 출력, 내보내기
	FileOutputStream - write를 기술하여 객체 생성시 명시한 파일명에 텍스트를 추가, 덮어쓰기 할 수 있음
	
kr.s13.reader -> 버퍼 읽기
	InputStreamReader - System.in(바이트 입력 스트림)을 문자 입력 스트림으로 변환
	
kr.s14.writer -> 버퍼 쓰기 
	System.getProperty("line.separator") - OS별 호환이 가능한 줄바꿈 입력
	

---------------------------------------------------------------------------------------------------------------------------------------------	
버퍼(buffer)는 데이터를 한 곳에서 다른 한 곳으로 전송하는 동안 일시적으로 그 데이터를 보관하는 메모리의 영역이다.
버퍼링(buffering)이란 버퍼를 활용하는 방식 또는 버퍼를 채우는 동작을 말한다. 다른 말로 '큐(Queue)'라고도 표현한다.
버퍼는 컴퓨터 안의 프로세스 사이에서 데이터를 이동시킬 때 사용된다.
보통 데이터는 키보드와 같은 입력 장치로부터 받거나 프린터와 같은 출력 장치로 내보낼 때 버퍼 안에 저장된다.
이는 전자 통신의 버퍼와 비유할 수 있다. 버퍼는 하드웨어나 소프트웨어에 추가될 수 있지만 버퍼는 상당수가 소프트웨어에 추가된다.
버퍼는 보통 속도가 계속 바뀔 수 있으므로 데이터 수신, 처리 속도에 차이가 있다. (예: 프린터 스풀러)

버퍼는 네트워크 상에서 자료를 주고 받을 때나 스피커에 소리를 재생할 때, 또는 디스크 드라이브와 같은 하드웨어의 입출력을 결합하는 데에 자주 이용된다.
버퍼는 또한 순서대로 데이터를 출력하는 FIFO 방식에서 보통 사용된다.
---------------------------------------------------------------------------------------------------------------------------------------------

kr.s15.serial -> 객체의 직렬화
	 - 직렬화(serialization) : 객체를 스트림으로 만드는작업
	 - 역직렬화(deserialization) : 스트림을 객체로 만드는작업
	 - 직렬화 : 현재 데이터(structure, object)의 상태를 영속적으로 저장하거나 다른 환경으로 전달(네트워크 통신 등)하기 위해
	 			어떠한 정해진 포맷으로 변환하는 과정을 말합니다.
	 			
	 			
kr.s16.tranning
String.format() -> 문자열의 포맷을 주는 방법 ( Member 클래스 맨 밑에서 재정의함 )